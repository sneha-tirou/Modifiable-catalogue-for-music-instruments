//HEADER FILE
#include <iostream>
#include <iomanip>
using namespace std;
class instrument 
{
	public: 
	int instrument_no; 
	string instrument_name; 
	string instrument_type; 
	public:
		instrument() {} 
	instrument(int instrument_no_, string instrument_name_, string instrument_type_) 
	{
		instrument_no = instrument_no_; 
		instrument_name = instrument_name_; 
		instrument_type = instrument_type_; 
	}
};
ostream &operator<<(ostream &os, const instrument &p) 
                                                      
													 
{
	return os << " " <<p.instrument_no << ". " <<p.instrument_name << "  " <<p.instrument_type << "\n"; 
}
class node 
{
	int key;
	instrument meaning;
	node *left, *right;
	int height;
	public:
		node() 
		{
			left = right = NULL; 
			height = 1; 
			meaning = meaning;
			key = -1; 
		}
	node(int key, instrument meaning) 
	{
		this->key = key; 
		this->meaning = meaning;
		left = right = NULL; 
		height = 1;
	}
	void print()
	{
		cout << meaning << "\n"; 
	}
	void DisplayInstrumentDetail()
	{
		cout << meaning << "\n"; 
	}
	int getKey()
	{
		return key; 
	}
	friend class InstrumentCollection; 
	                                   
};
class InstrumentCollection 
{
	node * root; 
	public:
		InstrumentCollection()
		{
			root = NULL; 
		}
	int max(int, int); 
	int getheight(node*); 
	node* insert(node *node, int key, instrument meaning); 
	void insertInit(int key, instrument meaning); 
	node* rightRotate(node*);  
	node* leftRotate(node*); 
	int getbalance(node*); 
	void displayInstruments();
	void displayInstrumentRecord(node*);
	node* searchInstrument(int);
	node* searchInstrumentRecord(node*, int);
	void deleteInstrument(int);
	node* deleteInstrumentRecord(node*, int);
	node* findMin(node*);
};
int InstrumentCollection::max(int a, int b) 
{
	return (a > b) ? a : b; 
}
int InstrumentCollection::getheight(node *nnode) 
{
	if (nnode == NULL) 
		return 0;
	else
		return nnode->height; 
}
int InstrumentCollection::getbalance(node *n) )
{
	if (n == NULL) 
		return 0;
	else
		return (getheight(n->left) - getheight(n->right));
}
node* InstrumentCollection::rightRotate(node *y)
{
	node *x = y->left; 
	node *xr = x->right; 
	x->right = y; 
	y->left = xr; 
	y->height = max(getheight(y->left), getheight(y->right)) + 1; 
	x->height = max(getheight(x->left), getheight(x->right)) + 1;
	return x; //return x!
}
node* InstrumentCollection::leftRotate(node *y) 
{
	node *x = y->right; 
	node *t2 = x->left; 
	x->left = y; 
	y->right = t2;
	y->height = max(getheight(y->left), getheight(y->right)) + 1; 
	x->height = max(getheight(x->left), getheight(x->right)) + 1;
	return x; 
}
node *InstrumentCollection::insert(node *rnode, int key, instrument meaning) 
{
	if (rnode == NULL)
		return new node(key, meaning); 
	if (key < rnode->key) 
		rnode->left = insert(rnode->left, key, meaning);
	else if (key > rnode->key) 
		rnode->right = insert(rnode->right, key, meaning);
	else
		return rnode; 
	rnode->height = 1 + max(getheight(rnode->left), getheight(rnode->right)); 
	int balance = getbalance(rnode); 
	if (balance > 1 && key < rnode->left->key) 
		return rightRotate(rnode);             
	if (balance < -1 && key > rnode->right->key)
	                                            
		return leftRotate(rnode);                
	if (balance > 1 && key > rnode->left->key) 
	{
		rnode->left = leftRotate(rnode->left); 
		return rightRotate(rnode);             
	}
	                                          
	if (balance < -1 && key < rnode->right->key) 
	{
		rnode->right = rightRotate(rnode->right); 
		return leftRotate(rnode);                 
	}                        
	                                              
	return rnode;
}
void InstrumentCollection::displayInstruments() 
{
	displayInstrumentRecord(root);
}
node *InstrumentCollection::searchInstrument(int key) 
{
	return searchInstrumentRecord(root, key);
}
void InstrumentCollection::deleteInstrument(int key) 
{
	deleteInstrumentRecord(root, key);
}
void InstrumentCollection::displayInstrumentRecord(node *n) 
{
	if (n)
	{
		displayInstrumentRecord(n->left);
		n->print();
		displayInstrumentRecord(n->right); 
	}
}
                 
bool flag = false; 
node * temporyNode; 
node *InstrumentCollection::searchInstrumentRecord(node *n, int key) 
{
	if (n) 
	{
		searchInstrumentRecord(n->left, key); 
		if (key == n->key)
		{
			temporyNode = n; 
			flag = true; 
		}
		searchInstrumentRecord(n->right, key); 
	}
	if (flag == true)
		return temporyNode; 
	else
		return NULL;
}
node *InstrumentCollection::deleteInstrumentRecord(node *rnode, int key) /
{
	node *temp; 
	if (key < rnode->key) 
		rnode->left = deleteInstrumentRecord(rnode->left, key);
	else if (key > rnode->key) 
	                           
		rnode->right = deleteInstrumentRecord(rnode->right, key);
	else if (rnode->left && rnode->right) 
	{
		temp = findMin(rnode->right); 
		rnode->key = temp->key;
		rnode->right = deleteInstrumentRecord(rnode->right, rnode->key); 
	}
	else 
	{
		temp = rnode;          
		if (rnode->left == NULL)
			rnode = rnode->right;
		else if (rnode->right == NULL)
			rnode = rnode->left;
		delete temp;          
	}
	if (rnode == NULL) 
		return rnode; 
	rnode->height = 1 + max(getheight(rnode->left), getheight(rnode->right)); 
	int balance = getbalance(rnode); 
	if (balance > 1 && key < rnode->left->key) 
		return rightRotate(rnode);    
	if (balance < -1 && key > rnode->right->key)   
		return leftRotate(rnode);     
	if (balance > 1 && key > rnode->left->key) 
	{
		rnode->left = leftRotate(rnode->left); 
		return rightRotate(rnode);           
	}
	if (balance < -1 && key < rnode->right->key)  
	{
		rnode->right = rightRotate(rnode->right); 
		return leftRotate(rnode);                
	}
	return rnode;
}
node *InstrumentCollection::findMin(node *t) 
{
	if (t == NULL) 
		return NULL;
	else if (t->left == NULL) 
		return t;
	else
		return findMin(t->left); 
}
void InstrumentCollection::insertInit(int key, instrument meaning) 
{
	root = insert(root, key, meaning); 
}
void searchingElement(int searchingElement, InstrumentCollection d) {
}
